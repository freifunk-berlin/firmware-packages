#!/bin/sh

. /lib/functions.sh
. /lib/functions/network.sh

config_load ffwizard
local sharenet
config_get sharenet settings sharenet

[ "$sharenet" = 1 ] || exit

if [ "$INTERFACE" = ffuplink ]; then
  if [ "$ACTION" = ifup ]; then
#
# The routing table assignment for ffuplink is now set in 
# /etc/config/network with the ip{4|6}table options.  The
# previously used script is here as comments for documentation 
# purposes only.  
# Logging has been left in place for obvious reasons.
#
#    local gateway
    logger -t ff-userlog "ffuplink connection will be established"
#    network_get_gateway gateway wan
#    ip route add default via ${gateway} dev ffuplink table ffuplink
    logger -t ff-userlog "ffuplink connection has been established"
  fi
  if [ "$ACTION" = ifdown ]; then
    logger -t ff-userlog "ffuplink connection went down"
  fi
fi

[ "$INTERFACE" = wan ] || exit

#config_load openvpn
#local uci_vpn_enabled
#config_get uci_vpn_enabled ffuplink enabled

if [ "$ACTION" = ifup ]; then
  logger -t ff-userlog "WAN interface is up"
  if [ "$sharenet" = 1 ]; then
    logger -t ff-userlog "configuring ffuplink on WAN interface"
#
# The no-tunnel version only needs to have the ffuplink device activated
# and therefore the following commented out commands are not needed.
#
#    local wanip
#    network_get_ipaddr wanip "wan"
#    ip link add ffuplink type veth peer name ffuplink_wan
#    brctl addif br-wan ffuplink_wan
#    ip link set up ffuplink_wan
    ifup ffuplink
    exit
  fi
fi

if [ "$ACTION" = ifdown ]; then
  logger -t ff-userlog "WAN interface went down"
  if [ "$sharenet" = 1 ]; then
    logger -t ff-uplink-hotplug "taking down interface ffuplink"
    ifdown ffuplink
    exit
  fi
fi


#!/bin/sh

# always set correct masquerading, regardless of guard
uci set firewall.zone_ffuplink.masq=1
uci commit firewall

# create ffberlin-uplink file an fill with basic settings
uci -q get ffberlin-uplink || echo "" | uci import ffberlin-uplink
uci >/dev/null -q get ffberlin-uplink.preset || uci set ffberlin-uplink.preset=settings
uci >/dev/null -q get ffberlin-uplink.preset.current || uci set ffberlin-uplink.preset.current="no-tunnel"
if [[ $(uci get ffberlin-uplink.preset.current) != "no-tunnel" ]]; then
  uci rename ffberlin-uplink.preset.current=previous
  uci set ffberlin-uplink.preset.current="no-tunnel"
fi
# set set auth-type required for this uplink-type, e.g. for freifunk-wizard
uci set ffberlin-uplink.uplink=settings
uci set ffberlin-uplink.uplink.auth=none

uci commit ffberlin-uplink

. /lib/functions/guard.sh
guard "notunnel"

uci delete network.ffuplink_dev
uci set network.ffuplink_dev=device
uci set network.ffuplink_dev.type=veth
uci set network.ffuplink_dev.name=ffuplink
uci set network.ffuplink_dev.peer_name=ffuplink_wan
# add ffuplink_dev to br-wan
uci set network.wan.ifname="$(uci get network.wan.ifname) ffuplink_wan"
uci commit network.ffuplink_dev

uci delete network.ffuplink
uci set network.ffuplink=interface
uci set network.ffuplink.ifname=ffuplink
uci set network.ffuplink.proto=dhcp
# Put the resulting routing information from the dhcp request in the ffuplink table
# instead of the default table.  This prevents the dhcp request for the ffuplink
# interface from overwriting the routing table entries needed by br_wan.
uci set network.ffuplink.ip4table=ffuplink
uci set network.ffuplink.ip6table=ffuplink
uci commit network
